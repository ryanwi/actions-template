name: Build and pushing docker
description: Buld and push image to SignalWire registry

inputs:
  TELEPORT_VERSION:
    required: false
    default: 11.2.1
  PROXY_URL:
    required: true
  JOIN_METHOD:
    required: false
    default: github
  K8S_CLUSTER_NAME:
    required: false
  TELEPORT_APP:
    required: false
    description: An app registered on teleport to connect via proxy.
  
runs:
  using: "composite"
  steps:
    - name: Fetch Teleport binaries
      uses: gravitational/teleport-actions/setup@v1
      with:
        version: ${{ inputs.TELEPORT_VERSION }}

    - name: Fetch credentials using Machine ID
      id: auth
      uses: teleport-actions/auth@v1
      if: inputs.K8S_CLUSTER_NAME == ''
      with:
        # Use the address of the auth/proxy server for your own cluster.
        proxy: ${{ inputs.PROXY_URL }}
        # Use the name of the join token resource you created in step 1.
        token: ${{ env.TOKEN }}
        # Specify the length of time that the generated credentials should be
        # valid for. This is optional and defaults to "1h"
        certificate-ttl: 1h

    # - name: Fetch credentials
    #   # if: inputs.HOSTNAME != ''
    #   run: >
    #     tbot start
    #     --auth-server=${{ inputs.PROXY_URL }}
    #     --join-method=${{ inputs.JOIN_METHOD }}
    #     --token=${{ env.TOKEN }}
    #     --ca-pin=${{ env.CA_PIN }}
    #     --oneshot
    #     --destination-dir=./opt/machine-id
    #     --data-dir=./opt/machine-id-data
    #   shell: bash

    - name: Authorize against Teleport
      id: auth_k8s
      if: inputs.K8S_CLUSTER_NAME != ''
      uses: gravitational/teleport-actions/auth-k8s@v1
      with:
        # Specify the publically accessible address of your Teleport proxy.
        proxy: ${{ inputs.PROXY_URL }}
        # Specify the name of the join token for your bot.
        token: ${{ env.TOKEN }}
        # Specify the length of time that the generated credentials should be
        # valid for. This is optional and defaults to "1h"
        certificate-ttl: 1h

        kubernetes-cluster: ${{ inputs.K8S_CLUSTER_NAME }}
    
    # - name: Execute scripts on remote
    #   if: inputs.FILES != ''
    #   run: >
    #     RSYNC_RSH='tsh ssh'
    #     tsh -i ${{ steps.auth.outputs.identity-file }} ssh ${{ inputs.USERNAME }}@${{ inputs.HOSTNAME }} sh ${{ inputs.SCRIPT_PATH }}
    #   shell: bash

    # - name: Login to ${{inputs.TELEPORT_APP}}
    #   if: inputs.TELEPORT_APP != ''
    #   run: tsh -i ${{ steps.auth.outputs.identity-file }} app login ${{inputs.TELEPORT_APP}}
    #   shell: bash
    - name: Login to ${{inputs.TELEPORT_APP}}
      run: tsh -i ${{ steps.auth.outputs.identity-file }} ls
      shell: bash