# This is a basic workflow to help you get started with Actions

name: Docker Build, Scan & Push

# Controls when the workflow will run
on:

  workflow_call:
    inputs:
      PROJECT_NAME:
        required: true
        type: string
      PUSH:
        required: false
        type: string
        default: false
      FILE:
        required: false
        type: string
        default: ./Dockerfile
      CONTEXT:
        required: false
        type: string
        default: .
      PLATFORMS:
        required: false
        type: string
        default: linux/amd64
      ENABLE_GPG:
        required: false
        type: boolean
        default: false
      GPG_FILE:
        required: false
        type: string
        default: tls.zip.asc
      SUBMODULES_RECURSIVE:
        required: false
        type: boolean
        default: false
      TAG:
        required: false
        type: string
        default: |
          type=schedule
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha
      BUILD_ARGS:
        required: false
        type: string
        default: ''
      SUBMODULES_PRIVATE: 
        required: false
        type: boolean
        default: true
      ENVIRONMENT:
        required: true
        type: string
      MANUAL_ENV:
        type: string
        required: false
    secrets:
      DOCKERHUB_USERNAME:
        required: true
      DOCKERHUB_TOKEN:
        required: true
      GPG_PASSPHRASE:
        required: false
      GH_BOT_DEPLOY_KEY:
        required: false


# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest 
    name: BUILD
    environment: ${{inputs.ENVIRONMENT}}

    outputs:
      IMAGE_TAG: ${{ steps.build.outputs.IMAGE_TAG }}
    steps:

    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - uses: actions/checkout@v3
      if: ${{ inputs.SUBMODULES_RECURSIVE  == true && inputs.SUBMODULES_PRIVATE == true }}
      with:
        ssh-key: ${{ secrets.GH_BOT_DEPLOY_KEY }}
        submodules: 'recursive'

    - uses: actions/checkout@v3
      if: ${{ inputs.SUBMODULES_RECURSIVE  == true && inputs.SUBMODULES_PRIVATE == false }}
      with:
        submodules: 'recursive'

    - name: Checkout actions
      uses: actions/checkout@v3
      with:
        repository: signalwire/actions-template
        ref: main
        path: actions
        
    - uses: ./actions/.github/actions/gpg
      name: Enable GPG
      if: ${{ inputs.ENABLE_GPG  == true }}
      with:
        FILE: ${{ inputs.GPG_FILE }}
      env:
        PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}

    # - uses: ./actions/.github/actions/docker
    #   name: Docker build
    #   id: build
    #   with:
    #     PROJECT_NAME: ${{ inputs.PROJECT_NAME }}
    #     PUSH: ${{ inputs.PUSH }}
    #     FILE: ${{ inputs.FILE }}
    #     CONTEXT: ${{ inputs.CONTEXT }}
    #     PLATFORMS: ${{ inputs.PLATFORMS }}
    #     TAG: ${{ inputs.TAG }}
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #     DOCKERHUB_USERNAME: ${{secrets.DOCKERHUB_USERNAME }}
    #     DOCKERHUB_TOKEN: ${{secrets.DOCKERHUB_TOKEN }}
    #     BUILD_ARGS: ${{ inputs.BUILD_ARGS }}
    - name: Configure buildx
      run: export DOCKER_CLI_EXPERIMENTAL=enabled && export DOCKER_TLS_CERTDIR="" && export DOCKER_HOST='docker'
      shell: bash

    - name: Docker meta
      id: meta
      uses: docker/metadata-action@v4
      with:
        # list of Docker images to use as base name for tags
        images: |
          signalwire/${{ inputs.PROJECT_NAME }}
        # generate Docker tags based on the following events/attributes
        tags: |
          ${{ inputs.TAG }}
    
    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ env.DOCKERHUB_USERNAME }}
        password: ${{ env.DOCKERHUB_TOKEN }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Build and export to Docker
      uses: docker/build-push-action@v3
      with:
        load: true
        tags: |
          ${{ steps.meta.outputs.tags }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        file: ${{ inputs.FILE }}
        context: ${{ inputs.CONTEXT }}
        platforms: ${{ inputs.PLATFORMS }}
        build-args: ${{ inputs.BUILD_ARGS }}

    - name: Test
      if: github.event_name == 'pull_request'
      id: test
      shell: bash
      run: |
        docker run -d --rm --name test ${{ fromJSON(steps.meta.outputs.json).tags[0] }}
        sleep 20
        docker logs test > logs.txt
        EXECUTIONLOG=$(cat logs.txt)
        EXECUTIONLOG="${EXECUTIONLOG//'%'/'%25'}"
        EXECUTIONLOG="${EXECUTIONLOG//$'\n'/'%0A'}"
        EXECUTIONLOG="${EXECUTIONLOG//$'\r'/'%0D'}"
        echo "::set-output name=container-logs::$EXECUTIONLOG"
    
    - name: Build and push
      if: ${{ inputs.PUSH == 'true' }}
      uses: docker/build-push-action@v3
      with:
        push: true
        tags: |
          ${{ steps.meta.outputs.tags }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        secrets: ${{inputs.MANUAL_ENV}}
        file: ${{ inputs.FILE }}
        context: ${{ inputs.CONTEXT }}
        platforms: ${{ inputs.PLATFORMS }}
        build-args: ${{ inputs.BUILD_ARGS }}

    
    - run: echo "::set-output name=image_tag::$${{ steps.meta.outputs.tags }}"
    # - uses: ./actions/.github/actions/trivy
    #   name: Trivy Scan
    #   if: github.event_name == 'pull_request'
    #   with:
    #     IMAGE: ${{ steps.build.outputs.IMAGE_TAG }}
    #     TRIVY_IGNORES: ./actions/.github/actions/trivy/.trivyignore
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUBTOKEN }}
